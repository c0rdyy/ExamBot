from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters.command import Command

from sqlalchemy import select
from database.models import async_session, Question

from sqlalchemy.sql import func

from config.admin_ids import ADMIN_IDS
from keyboards.test import *
from keyboards.test_keyboard import *
from database.states import TestState

start_router = Router()

@start_router.message(F.text == "/start")
async def cmd_start(message: Message):
    if message.from_user.id in ADMIN_IDS:
        keyboard = admin_main_menu_keyboard()
    else:
        keyboard = user_main_menu_keyboard()

    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@start_router.callback_query(TestState.choosing_difficulty)
async def choose_difficulty(callback: CallbackQuery, state: FSMContext):
    difficulty = callback.data.replace("difficulty_", "")
    async with async_session() as session:
        result = await session.execute(
            select(Question).where(Question.difficulty == difficulty).order_by(func.random()).limit(10)
        )
        questions = result.scalars().all()

    if len(questions) < 10:
        await callback.message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–≤–Ω—è.")
        await state.clear()
        return

    await state.update_data(questions=questions, index=0, correct=0, difficulty=difficulty)
    await callback.message.delete()
    await ask_next_question(callback.message, state)

async def ask_next_question(message: Message, state: FSMContext):
    data = await state.get_data()
    index = data["index"]
    questions = data["questions"]

    if index >= len(questions):
        # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç–µ—Å—Ç
        total = len(questions)
        correct = data["correct"]
        percent = correct / total * 100

        if percent >= 90:
            score = 5
        elif percent >= 70:
            score = 4
        elif percent >= 50:
            score = 3
        elif percent >= 30:
            score = 2
        else:
            score = 1

        # –ë–∞–ª–ª –≤ —Ä–µ–π—Ç–∏–Ω–≥ —Å –≤–µ—Å–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        weight = {"easy": 1.0, "medium": 1.5, "hard": 2.0}
        rating_score = score * weight[data["difficulty"]]

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
        from models import Result
        async with async_session() as session:
            session.add(Result(
                user_id=message.from_user.id,
                score=score,
                rating_score=rating_score,
                difficulty=data["difficulty"]
            ))
            await session.commit()

        await message.answer(f"‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!\n"
                             f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct} –∏–∑ {total}\n"
                             f"–û—Ü–µ–Ω–∫–∞: {score}/5")
        await state.clear()
        return

    q = questions[index]
    options = q.options
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=opt, callback_data=f"answer_{i}")]
        for i, opt in enumerate(options)
    ])

    await message.answer(f"–í–æ–ø—Ä–æ—Å {index+1}:\n{q.text}", reply_markup=kb)

@start_router.callback_query(F.data.startswith("answer_"), TestState.answering)
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data["index"]
    questions = data["questions"]
    q = questions[index]

    answer_index = int(callback.data.replace("answer_", ""))
    correct = data["correct"]
    if answer_index == q.correct_index:
        correct += 1

    await state.update_data(index=index + 1, correct=correct)
    await callback.message.delete()
    await ask_next_question(callback.message, state)

@start_router.message(F.text == "/test")
@start_router.message(F.text == "üß† –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç")
async def handle_test(message: Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=test_keyboard)
    await state.set_state(TestState.choosing_difficulty)

@start_router.message(F.text == "/profile")
@start_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile(message: Message):
    await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:")

@start_router.message(F.text == "/rate")
@start_router.message(F.text == "üèÜ –†–µ–π—Ç–∏–Ω–≥")
async def handle_rating(message: Message):
    await message.answer("–¢–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥:")

@start_router.message(F.text == "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
async def handle_admin(message: Message):
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:")

@start_router.message(F.text == "/help")
@start_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(message: Message):
    help_text = (
        "‚ÑπÔ∏è *–û –±–æ—Ç–µ:*\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç–Ω–æ-–æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é (–û–û–ü).\n\n"
        "üìå *–ö–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:*\n"
        "/start - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞.\n"
        "/test ‚Äî –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç.\n"
        "/profile ‚Äî –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å.\n"
        "/rate ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π —Ä–µ–π—Ç–∏–Ω–≥ —Å—Ä–µ–¥–∏ –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.\n"
        "/help ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º.\n\n"
    )
    await message.answer(help_text, parse_mode="Markdown")

